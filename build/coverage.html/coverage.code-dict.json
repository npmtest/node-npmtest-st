{"/home/travis/build/npmtest/node-npmtest-st/test.js":"/* istanbul instrument in package npmtest_st */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-st/lib.npmtest_st.js":"/* istanbul instrument in package npmtest_st */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_st = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_st = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-st/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-st && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_st */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_st\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_st.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_st.rollup.js'] =\n            local.assetsDict['/assets.npmtest_st.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_st.__dirname + '/lib.npmtest_st.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-st/node_modules/st/st.js":"module.exports = st\n\nst.Mount = Mount\n\nvar mime = require('mime')\nvar path = require('path')\nvar fs\ntry {\n  fs = require('graceful-fs')\n} catch (e) {\n  fs = require('fs')\n}\nvar url = require('url')\nvar zlib = require('zlib')\nvar Neg = require('negotiator')\nvar http = require('http')\nvar AC = require('async-cache')\nvar util = require('util')\nvar FD = require('fd')\nvar bl = require('bl')\n\n// default caching options\nvar defaultCacheOptions = {\n  fd: {\n    max: 1000,\n    maxAge: 1000 * 60 * 60,\n  },\n  stat: {\n    max: 5000,\n    maxAge: 1000 * 60\n  },\n  content: {\n    max: 1024 * 1024 * 64,\n    length: function (n) {\n      return n.length\n    },\n    maxAge: 1000 * 60 * 10\n  },\n  index: {\n    max: 1024 * 8,\n    length: function (n) {\n      return n.length\n    },\n    maxAge: 1000 * 60 * 10\n  },\n  readdir: {\n    max: 1000,\n    length: function (n) {\n      return n.length\n    },\n    maxAge: 1000 * 60 * 10\n  }\n}\n\nfunction st (opt) {\n  var p, u\n  if (typeof opt === 'string') {\n    p = opt\n    opt = arguments[1]\n    if (typeof opt === 'string') {\n      u = opt\n      opt = arguments[2]\n    }\n  }\n\n  if (!opt) opt = {}\n  else opt = util._extend({}, opt)\n\n  if (!p) p = opt.path\n  if (typeof p !== 'string') throw new Error('no path specified')\n  p = path.resolve(p)\n  if (!u) u = opt.url\n  if (!u) u = ''\n  if (u.charAt(0) !== '/') u = '/' + u\n\n  opt.url = u\n  opt.path = p\n\n  var m = new Mount(opt)\n  var fn = m.serve.bind(m)\n  fn._this = m\n  return fn\n}\n\nfunction Mount (opt) {\n  if (!opt) throw new Error('no options provided')\n  if (typeof opt !== 'object') throw new Error('invalid options')\n  if (!(this instanceof Mount)) return new Mount(opt)\n\n  this.opt = opt\n  this.url = opt.url\n  this.path = opt.path\n  this._index = opt.index === false ? false\n              : typeof opt.index === 'string' ? opt.index\n              : true\n  this.fdman = FD()\n\n  // cache basically everything\n  var c = this.getCacheOptions(opt)\n  this.cache = {\n    fd: AC(c.fd),\n    stat: AC(c.stat),\n    index: AC(c.index),\n    readdir: AC(c.readdir),\n    content: AC(c.content)\n  }\n\n  this._cacheControl =\n    c.content.maxAge === false\n      ? undefined\n      : typeof c.content.cacheControl == 'string'\n        ? c.content.cacheControl\n        : opt.cache === false\n          ? 'no-cache'\n          : 'public, max-age=' + (c.content.maxAge / 1000)\n}\n\n// lru-cache doesn't like when max=0, so we just pretend\n// everything is really big.  kind of a kludge, but easiest way\n// to get it done\nvar none = { max: 1, length: function() {\n  return Infinity\n}}\nvar noCaching = {\n  fd: none,\n  stat: none,\n  index: none,\n  readdir: none,\n  content: none\n}\n\nMount.prototype.getCacheOptions = function (opt) {\n  var o = opt.cache\n    , set = function (key) {\n        return o[key] === false\n          ? util._extend({}, none)\n          : util._extend(util._extend({}, d[key]), o[key])\n      }\n\n  if (o === false)\n    o = noCaching\n  else if (!o)\n    o = {}\n\n  var d = defaultCacheOptions\n\n  // should really only ever set max and maxAge here.\n  // load and fd disposal is important to control.\n  var c = {\n    fd: set('fd'),\n    stat: set('stat'),\n    index: set('index'),\n    readdir: set('readdir'),\n    content: set('content'),\n  }\n\n  c.fd.dispose = this.fdman.close.bind(this.fdman)\n  c.fd.load = this.fdman.open.bind(this.fdman)\n\n  c.stat.load = this._loadStat.bind(this)\n  c.index.load = this._loadIndex.bind(this)\n  c.readdir.load = this._loadReaddir.bind(this)\n  c.content.load = this._loadContent.bind(this)\n  return c\n}\n\n// get a path from a url\nMount.prototype.getPath = function (u) {\n  var p = url.parse(u).pathname\n\n  // Encoded dots are dots\n  p = p.replace(/%2e/ig, '.')\n\n  // encoded slashes are /\n  p = p.replace(/%2f|%5c/ig, '/')\n\n  // back slashes are slashes\n  p = p.replace(/[\\/\\\\]/g, '/')\n\n  // Make sure it starts with a slash\n  p = p.replace(/^\\//, '/')\n\n  if (p.match(/[\\/\\\\]\\.\\.[\\/\\\\]/)) {\n    // traversal urls not ever even slightly allowed. clearly shenanigans\n    // send a 403 on that noise, do not pass go, do not collect $200\n    return 403\n  }\n\n  u = path.normalize(p).replace(/\\\\/g, '/')\n  if (u.indexOf(this.url) !== 0) return false\n\n  try {\n    u = decodeURIComponent(u)\n  }\n  catch (e) {\n    // if decodeURIComponent failed, we weren't given a valid URL to begin with.\n    return false\n  }\n\n  // /a/b/c mounted on /path/to/z/d/x\n  // /a/b/c/d --> /path/to/z/d/x/d\n  u = u.substr(this.url.length)\n  if (u.charAt(0) !== '/') u = '/' + u\n\n  p = path.join(this.path, u)\n  return p\n}\n\n// get a url from a path\nMount.prototype.getUrl = function (p) {\n  p = path.resolve(p)\n  if (p.indexOf(this.path) !== 0) return false\n  p = path.join('/', p.substr(this.path.length))\n  var u = path.join(this.url, p).replace(/\\\\/g, '/')\n  return u\n}\n\nMount.prototype.serve = function (req, res, next) {\n  if (req.method !== 'HEAD' && req.method !== 'GET') {\n    if (typeof next === 'function') next()\n    return false\n  }\n\n  // querystrings are of no concern to us\n  if (!req.sturl)\n    req.sturl = url.parse(req.url).pathname\n\n  var p = this.getPath(req.sturl)\n\n  // Falsey here means we got some kind of invalid path.\n  // Probably urlencoding we couldn't understand, or some\n  // other \"not compatible with st, but maybe ok\" thing.\n  if (!p) {\n    if (typeof next === 'function') next()\n    return false\n  }\n\n  // don't allow dot-urls by default, unless explicitly allowed.\n  // If we got a 403, then it's explicitly forbidden.\n  if (p === 403 || !this.opt.dot && req.sturl.match(/(^|\\/)\\./)) {\n    res.statusCode = 403\n    res.end('Forbidden')\n    return true\n  }\n\n  // now we have a path.  check for the fd.\n  this.cache.fd.get(p, function (er, fd) {\n    // inability to open is some kind of error, probably 404\n    // if we're in passthrough, AND got a next function, we can\n    // fall through to that.  otherwise, we already returned true,\n    // send an error.\n    if (er) {\n      if (this.opt.passthrough === true && er.code === 'ENOENT' && next)\n        return next()\n      return this.error(er, res)\n    }\n\n    // we may be about to use this, so don't let it be closed by cache purge\n    this.fdman.checkout(p, fd)\n    // a safe end() function that can be called multiple times but\n    // only perform a single checkin\n    var end = this.fdman.checkinfn(p, fd)\n\n    this.cache.stat.get(fd+':'+p, function (er, stat) {\n      if (er) {\n        if (next && this.opt.passthrough === true && this._index === false) {\n          return next()\n        }\n        end()\n        return this.error(er, res)\n      }\n\n      var isDirectory = stat.isDirectory()\n\n      if (isDirectory) {\n        end() // we won't need this fd for a directory in any case\n        if (next && this.opt.passthrough === true && this._index === false) {\n          // this is done before if-modified-since and if-non-match checks so\n          // cached modified and etag values won't return 304's if we've since\n          // switched to !index. See Issue #51.\n          return next()\n        }\n      }\n\n      var ims = req.headers['if-modified-since']\n      if (ims) ims = new Date(ims).getTime()\n      if (ims && ims >= stat.mtime.getTime()) {\n        res.statusCode = 304\n        res.end()\n        return end()\n      }\n\n      var etag = getEtag(stat)\n      if (req.headers['if-none-match'] === etag) {\n        res.statusCode = 304\n        res.end()\n        return end()\n      }\n\n      // only set headers once we're sure we'll be serving this request\n      if (!res.getHeader('cache-control') && this._cacheControl)\n        res.setHeader('cache-control', this._cacheControl)\n      res.setHeader('last-modified', stat.mtime.toUTCString())\n      res.setHeader('etag', etag)\n\n      if (this.opt.cors) {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Headers',\n          'Origin, X-Requested-With, Content-Type, Accept, Range')\n      }\n\n      return isDirectory\n        ? this.index(p, req, res)\n        : this.file(p, fd, stat, etag, req, res, end)\n    }.bind(this))\n  }.bind(this))\n\n  return true\n}\n\nMount.prototype.error = function (er, res) {\n  res.statusCode = typeof er === 'number' ? er\n                 : er.code === 'ENOENT' || er.code === 'EISDIR' ? 404\n                 : er.code === 'EPERM' || er.code === 'EACCES' ? 403\n                 : 500\n\n  if (typeof res.error === 'function') {\n    // pattern of express and ErrorPage\n    return res.error(res.statusCode, er)\n  }\n\n  res.setHeader('content-type', 'text/plain')\n  res.end(http.STATUS_CODES[res.statusCode] + '\\n')\n}\n\nMount.prototype.index = function (p, req, res) {\n  if (this._index === true) {\n    return this.autoindex(p, req, res)\n  }\n  if (typeof this._index === 'string') {\n    if (!/\\/$/.test(req.sturl)) req.sturl += '/'\n    req.sturl += this._index\n    return this.serve(req, res)\n  }\n  return this.error(404, res)\n}\n\nMount.prototype.autoindex = function (p, req, res) {\n  if (!/\\/$/.exec(req.sturl)) {\n    res.statusCode = 301\n    res.setHeader('location', req.sturl + '/')\n    res.end('Moved: ' + req.sturl + '/')\n    return\n  }\n\n  this.cache.index.get(p, function (er, html) {\n    if (er) return this.error(er, res)\n\n    res.statusCode = 200\n    res.setHeader('content-type', 'text/html')\n    res.setHeader('content-length', html.length)\n    res.end(html)\n  }.bind(this))\n}\n\n\nMount.prototype.file = function (p, fd, stat, etag, req, res, end) {\n  var key = stat.size + ':' + etag\n\n  var mt = mime.lookup(path.extname(p))\n  if (mt !== 'application/octet-stream') {\n    res.setHeader('content-type', mt)\n  }\n\n  // only use the content cache if it will actually fit there.\n  if (this.cache.content.has(key)) {\n    end()\n    this.cachedFile(p, stat, etag, req, res)\n  } else {\n    this.streamFile(p, fd, stat, etag, req, res, end)\n  }\n}\n\nMount.prototype.cachedFile = function (p, stat, etag, req, res) {\n  var key = stat.size + ':' + etag\n  var gz = this.opt.gzip !== false && getGz(p, req)\n\n  this.cache.content.get(key, function (er, content) {\n    if (er) return this.error(er, res)\n    res.statusCode = 200\n    if (this.opt.cachedHeader)\n      res.setHeader('x-from-cache', 'true')\n    if (gz && content.gz) {\n      res.setHeader('content-encoding', 'gzip')\n      res.setHeader('content-length', content.gz.length)\n      res.end(content.gz)\n    } else {\n      res.setHeader('content-length', content.length)\n      res.end(content)\n    }\n  }.bind(this))\n}\n\nMount.prototype.streamFile = function (p, fd, stat, etag, req, res, end) {\n  var streamOpt = { fd: fd, start: 0, end: stat.size }\n  var stream = fs.createReadStream(p, streamOpt)\n  stream.destroy = function () {}\n\n  // gzip only if not explicitly turned off or client doesn't accept it\n  var gzOpt = this.opt.gzip !== false\n  var gz = gzOpt && getGz(p, req)\n  var cachable = this.cache.content._cache.max > stat.size\n  var gzstr\n\n  // need a gzipped version for the cache, so do it regardless of what the client wants\n  if (gz || (gzOpt && cachable)) gzstr = zlib.Gzip()\n\n  // too late to effectively handle any errors.\n  // just kill the connection if that happens.\n  stream.on('error', function(e) {\n    console.error('Error serving %s fd=%d\\n%s', p, fd, e.stack || e.message)\n    res.socket.destroy()\n    end()\n  })\n\n  if (res.filter) stream = stream.pipe(res.filter)\n\n  res.statusCode = 200\n\n  if (gz) {\n    // we don't know how long it'll be, since it will be compressed.\n    res.setHeader('content-encoding', 'gzip')\n    stream.pipe(gzstr).pipe(res)\n  } else {\n    if (!res.filter) res.setHeader('content-length', stat.size)\n    stream.pipe(res)\n    if (gzstr)\n      stream.pipe(gzstr) // for cache\n  }\n\n  stream.on('end', function () {\n    process.nextTick(end)\n  })\n\n  if (cachable) {\n    // collect it, and put it in the cache\n\n    var calls = 0\n\n    // called by bl() for both the raw stream and gzipped stream if we're\n    // caching gzipped data\n    var collectEnd = function () {\n      if (++calls == (gzOpt ? 2 : 1)) {\n        var content = bufs.slice()\n        content.gz = gzbufs && gzbufs.slice()\n        this.cache.content.set(key, content)\n      }\n    }.bind(this)\n\n    var key = stat.size + ':' + etag\n    var bufs = bl(collectEnd)\n    var gzbufs\n\n    stream.pipe(bufs)\n\n    if (gzstr) {\n      gzbufs = bl(collectEnd)\n      gzstr.pipe(gzbufs)\n    }\n  }\n}\n\n\n// cache-fillers\n\nMount.prototype._loadIndex = function (p, cb) {\n  // truncate off the first bits\n  var url = p.substr(this.path.length).replace(/\\\\/g, '/')\n  var t = url\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/'/g, '&#39;')\n\n  var str =\n    '<!doctype html>' +\n    '<html>' +\n    '<head><title>Index of ' + t + '</title></head>' +\n    '<body>' +\n    '<h1>Index of ' + t + '</h1>' +\n    '<hr><pre><a href=\"../\">../</a>\\n'\n\n  this.cache.readdir.get(p, function (er, data) {\n    if (er) return cb(er)\n\n    var nameLen = 0\n    var sizeLen = 0\n\n    Object.keys(data).map(function (f) {\n      var d = data[f]\n\n      var name = f\n          .replace(/\"/g, '&quot;')\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;')\n          .replace(/'/g, '&#39;')\n\n      if (d.size === '-') name += '/'\n      var showName = name.replace(/^(.{40}).{3,}$/, '$1..>')\n      var linkName = encodeURIComponent(name)\n                     .replace(/%2e/ig, '.')     // Encoded dots are dots\n                     .replace(/%2f|%5c/ig, '/') // encoded slashes are /\n                     .replace(/[\\/\\\\]/g, '/')   // back slashes are slashes\n\n      nameLen = Math.max(nameLen, showName.length)\n      sizeLen = Math.max(sizeLen, ('' + d.size).length)\n      return [ '<a href=\"' + linkName + '\">' + showName + '</a>',\n               d.mtime, d.size, showName ]\n    }).sort(function (a, b) {\n      return a[2] === '-' && b[2] !== '-' ? -1 // dirs first\n           : a[2] !== '-' && b[2] === '-' ? 1\n           : a[0].toLowerCase() < b[0].toLowerCase() ? -1 // then alpha\n           : a[0].toLowerCase() > b[0].toLowerCase() ? 1\n           : 0\n    }).forEach(function (line) {\n      var namePad = new Array(8 + nameLen - line[3].length).join(' ')\n      var sizePad = new Array(8 + sizeLen - ('' + line[2]).length).join(' ')\n      str += line[0] + namePad +\n             line[1].toISOString() +\n             sizePad + line[2] + '\\n'\n    })\n\n    str += '</pre><hr></body></html>'\n    cb(null, new Buffer(str))\n  })\n}\n\nMount.prototype._loadReaddir = function (p, cb) {\n  var len\n  var data\n  fs.readdir(p, function (er, files) {\n    if (er) return cb(er)\n    files = files.filter(function (f) {\n      if (!this.opt.dot) return !/^\\./.test(f)\n      else return f !== '.' && f !== '..'\n    }.bind(this))\n    len = files.length\n    data = {}\n    files.forEach(function (file) {\n      var pf = path.join(p, file)\n      this.cache.stat.get(pf, function (er, stat) {\n        if (er) return cb(er)\n        if (stat.isDirectory()) stat.size = '-'\n        data[file] = stat\n        next()\n      }.bind(this))\n    }.bind(this))\n  }.bind(this))\n\n  function next () {\n    if (--len === 0) cb(null, data)\n  }\n}\n\nMount.prototype._loadStat = function (key, cb) {\n  // key is either fd:path or just a path\n  var fdp = key.match(/^(\\d+):(.*)/)\n  if (fdp) {\n    var fd = +fdp[1]\n    var p = fdp[2]\n    fs.fstat(fd, function (er, stat) {\n      if (er) return cb(er)\n      this.cache.stat.set(p, stat)\n      cb(null, stat)\n    }.bind(this))\n  } else {\n    fs.stat(key, cb)\n  }\n}\n\nMount.prototype._loadContent = function () {\n  // this function should never be called.\n  // we check if the thing is in the cache, and if not, stream it in\n  // manually.  this.cache.content.get() should not ever happen.\n  throw new Error('This should not ever happen')\n}\n\nfunction getEtag (s) {\n  return '\"' + s.dev + '-' + s.ino + '-' + s.mtime.getTime() + '\"'\n}\n\nfunction getGz (p,req) {\n  var gz = false\n  if (!/\\.t?gz$/.exec(p)) {\n    var neg = req.negotiator || new Neg(req)\n    gz = neg.preferredEncoding(['gzip', 'identity']) === 'gzip'\n  }\n  return gz\n}\n","/home/travis/build/npmtest/node-npmtest-st/node_modules/st/bin/server.js":"#!/usr/bin/env node\nvar st = require('../st.js')\nvar http = require('http')\nvar port = +(process.env.PORT || 1337)\nvar host = undefined\nvar dir = ''\nvar url = '/'\nvar cacheSize = 0\nvar dot = false\nvar index = true\nvar cache = true\nvar age = null\nvar cors = false\n\nfor (var i = 2; i < process.argv.length; i++) {\n  switch (process.argv[i]) {\n    case '-p':\n    case '--port':\n      port = +(process.argv[++i])\n      break\n\n    case '-H':\n    case '--host':\n      host = process.argv[++i]\n      if (host === '*') {\n        host = undefined\n      }\n      break\n\n    case '-l':\n    case '--localhost':\n      host = 'localhost'\n      break\n\n    case '-d':\n    case '--dir':\n      dir = process.argv[++i]\n      break\n\n    case '-u':\n    case '--url':\n      url = process.argv[++i]\n      break\n\n    case '-.':\n    case '--dot':\n      dot = process.argv[++i]\n      if (dot === undefined || dot === 'true') dot = true\n      else if (dot === 'false') dot = false\n      else if (dot.charAt(0) === '-') {\n        --i\n        dot = true\n      }\n      break\n\n    case '-n.':\n    case '--no-dot':\n      dot = false\n      break\n\n    case '-i':\n    case '--index':\n      index = process.argv[++i]\n      if (index === undefined || index === 'true') index = true\n      if (index === 'false') index = false\n      if (index.charAt(0) === '-') {\n        --i\n        index = true\n      }\n      break\n\n    case '-ni':\n    case '--no-index':\n      index = false\n      break\n\n    case '-h':\n    case '--help':\n      help()\n      process.exit(0)\n\n    case '-nc':\n    case '--no-cache':\n      cache = false\n      break\n\n    case '-a':\n    case '--age':\n      age = process.argv[++i]\n      if (isNaN(age)) {\n        throw new Error('invalid age: ' + JSON.stringify(age))\n      }\n      age = +age\n      break\n\n    case '-co':\n    case '--cors':\n      cors = true;\n      break\n  }\n}\n\nfunction help () {\n  console.log(\n['st'\n,'Static file server in node'\n,''\n,'Options:'\n,''\n,'-h --help             Show this help'\n,''\n,'-p --port PORT        Listen on PORT (default=1337)'\n,''\n,'-H --host HOST        Bind address HOST (default=*)'\n,''\n,'-l --localhost        Same as \"--host localhost\"'\n,''\n,'-d --dir DIRECTORY    Serve the contents of DIRECTORY (default=cwd)'\n,''\n,'-u --url /url         Serve at this mount url (default=/)'\n,''\n,'-i --index [INDEX]    Use the specified INDEX filename as the result'\n,'                      when a directory is requested.  Set to \"true\"'\n,'                      to turn autoindexing on, or \"false\" to turn it'\n,'                      off.  If no INDEX is provided, then it will turn'\n,'                      autoindexing on.  (default=true)'\n,''\n,'-ni --no-index        Same as \"--index false\"'\n,''\n,'-. --dot [DOT]        Allow .files to be served.  Set to \"false\" to'\n,'                      disable.'\n,''\n,'-n. --no-dot          Same as \"--dot false\"'\n,''\n,'-co --cors            Enable CORS to serve files to any domain.'\n,''\n,'-nc --no-cache        Turn off all caching.'\n,''\n,'-a --age AGE          Max age (in ms) of cache entries.'\n].join('\\n'))\n}\n\nif (isNaN(port)) throw new Error('invalid port: '+port)\n\nvar opt = {\n  path: dir,\n  url: url,\n  index: index,\n  dot: dot,\n  cache: {\n    fd: {},\n    stat: {},\n    index: {},\n    readdir: {},\n    content: {}\n  },\n  cors: cors\n}\n\nif (cache === false) {\n  opt.cache = false\n} else {\n  if (age) {\n    Object.keys(opt.cache).forEach(function (k) {\n      opt.cache[k].maxAge = age\n    })\n  }\n  // maybe other cache-manipulating CLI flags?\n}\n\nvar mount = st(opt)\n\nhttp.createServer(function (q, s) {\n  if (mount(q, s)) return\n  s.statusCode = 404\n  s.end('not found')\n}).listen(port, host, function() {\n  var addr = this.address()\n  var port = addr.port\n  if (!host) {\n    host = addr.address\n  }\n  if (/:/.test(host)) {\n    host = '[' + host + ']'\n  }\n  console.log('listening at http://' + host + ':' + port)\n})\n"}